// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Address      *address
	Category     *category
	Goods        *goods
	Order        *order
	OrderDetail  *orderDetail
	OrderGoods   *orderGoods
	OrderPayment *orderPayment
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Address = &Q.Address
	Category = &Q.Category
	Goods = &Q.Goods
	Order = &Q.Order
	OrderDetail = &Q.OrderDetail
	OrderGoods = &Q.OrderGoods
	OrderPayment = &Q.OrderPayment
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Address:      newAddress(db, opts...),
		Category:     newCategory(db, opts...),
		Goods:        newGoods(db, opts...),
		Order:        newOrder(db, opts...),
		OrderDetail:  newOrderDetail(db, opts...),
		OrderGoods:   newOrderGoods(db, opts...),
		OrderPayment: newOrderPayment(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Address      address
	Category     category
	Goods        goods
	Order        order
	OrderDetail  orderDetail
	OrderGoods   orderGoods
	OrderPayment orderPayment
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Address:      q.Address.clone(db),
		Category:     q.Category.clone(db),
		Goods:        q.Goods.clone(db),
		Order:        q.Order.clone(db),
		OrderDetail:  q.OrderDetail.clone(db),
		OrderGoods:   q.OrderGoods.clone(db),
		OrderPayment: q.OrderPayment.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Address:      q.Address.replaceDB(db),
		Category:     q.Category.replaceDB(db),
		Goods:        q.Goods.replaceDB(db),
		Order:        q.Order.replaceDB(db),
		OrderDetail:  q.OrderDetail.replaceDB(db),
		OrderGoods:   q.OrderGoods.replaceDB(db),
		OrderPayment: q.OrderPayment.replaceDB(db),
	}
}

type queryCtx struct {
	Address      IAddressDo
	Category     ICategoryDo
	Goods        IGoodsDo
	Order        IOrderDo
	OrderDetail  IOrderDetailDo
	OrderGoods   IOrderGoodsDo
	OrderPayment IOrderPaymentDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Address:      q.Address.WithContext(ctx),
		Category:     q.Category.WithContext(ctx),
		Goods:        q.Goods.WithContext(ctx),
		Order:        q.Order.WithContext(ctx),
		OrderDetail:  q.OrderDetail.WithContext(ctx),
		OrderGoods:   q.OrderGoods.WithContext(ctx),
		OrderPayment: q.OrderPayment.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
