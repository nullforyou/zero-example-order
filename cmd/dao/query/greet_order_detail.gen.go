// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"order/cmd/dao/model"
)

func newOrderDetail(db *gorm.DB, opts ...gen.DOOption) orderDetail {
	_orderDetail := orderDetail{}

	_orderDetail.orderDetailDo.UseDB(db, opts...)
	_orderDetail.orderDetailDo.UseModel(&model.OrderDetail{})

	tableName := _orderDetail.orderDetailDo.TableName()
	_orderDetail.ALL = field.NewAsterisk(tableName)
	_orderDetail.ID = field.NewInt64(tableName, "id")
	_orderDetail.OrderID = field.NewInt64(tableName, "order_id")
	_orderDetail.AppointmentStartTime = field.NewTime(tableName, "appointment_start_time")
	_orderDetail.AppointmentEndTime = field.NewTime(tableName, "appointment_end_time")
	_orderDetail.Remark = field.NewString(tableName, "remark")
	_orderDetail.ExpressRemark = field.NewString(tableName, "express_remark")
	_orderDetail.SenderName = field.NewString(tableName, "sender_name")
	_orderDetail.SenderMobile = field.NewString(tableName, "sender_mobile")
	_orderDetail.SenderProvince = field.NewString(tableName, "sender_province")
	_orderDetail.SenderCity = field.NewString(tableName, "sender_city")
	_orderDetail.SenderCounty = field.NewString(tableName, "sender_county")
	_orderDetail.SenderAddress = field.NewString(tableName, "sender_address")
	_orderDetail.ReceiveName = field.NewString(tableName, "receive_name")
	_orderDetail.ReceiveMobile = field.NewString(tableName, "receive_mobile")
	_orderDetail.ReceiveProvince = field.NewString(tableName, "receive_province")
	_orderDetail.ReceiveCity = field.NewString(tableName, "receive_city")
	_orderDetail.ReceiveCounty = field.NewString(tableName, "receive_county")
	_orderDetail.ReceiveAddress = field.NewString(tableName, "receive_address")
	_orderDetail.IsPacking = field.NewInt64(tableName, "is_packing")
	_orderDetail.PackFee = field.NewFloat64(tableName, "pack_fee")
	_orderDetail.OutTotalPrice = field.NewFloat64(tableName, "out_total_price")
	_orderDetail.SendDeliveryID = field.NewString(tableName, "send_delivery_id")
	_orderDetail.ReceiveDeliveryID = field.NewString(tableName, "receive_delivery_id")
	_orderDetail.RefundDeliveryID = field.NewString(tableName, "refund_delivery_id")
	_orderDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_orderDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderDetail.DeletedAt = field.NewField(tableName, "deleted_at")
	_orderDetail.CityName = field.NewString(tableName, "city_name")

	_orderDetail.fillFieldMap()

	return _orderDetail
}

type orderDetail struct {
	orderDetailDo orderDetailDo

	ALL                  field.Asterisk
	ID                   field.Int64
	OrderID              field.Int64   // 订单id
	AppointmentStartTime field.Time    // 预约开始时间
	AppointmentEndTime   field.Time    // 预约结束时间
	Remark               field.String  // 给工厂的备注
	ExpressRemark        field.String  // 给快递备注
	SenderName           field.String  // 发件人姓名
	SenderMobile         field.String  // 发件人手机号
	SenderProvince       field.String  // 地区名称 省
	SenderCity           field.String  // 地区名称 市
	SenderCounty         field.String  // 地区名称 县
	SenderAddress        field.String  // 详细地址
	ReceiveName          field.String  // 收件人姓名
	ReceiveMobile        field.String  // 收件人手机号
	ReceiveProvince      field.String  // 地区名称 省
	ReceiveCity          field.String  // 地区名称 市
	ReceiveCounty        field.String  // 地区名称 县
	ReceiveAddress       field.String  // 详细地址
	IsPacking            field.Int64   // 是否需要包装 0不需要，1需要
	PackFee              field.Float64 // 包装费
	OutTotalPrice        field.Float64 // 第三方订单总价（同步第三方订单时返回）
	SendDeliveryID       field.String  // 送程快递信息（同步第三方订单时返回）
	ReceiveDeliveryID    field.String  // 返程快递信息（同步第三方订单时返回）
	RefundDeliveryID     field.String  // 退款快递信息（同步第三方订单时返回）
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	CityName             field.String

	fieldMap map[string]field.Expr
}

func (o orderDetail) Table(newTableName string) *orderDetail {
	o.orderDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderDetail) As(alias string) *orderDetail {
	o.orderDetailDo.DO = *(o.orderDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderDetail) updateTableName(table string) *orderDetail {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.AppointmentStartTime = field.NewTime(table, "appointment_start_time")
	o.AppointmentEndTime = field.NewTime(table, "appointment_end_time")
	o.Remark = field.NewString(table, "remark")
	o.ExpressRemark = field.NewString(table, "express_remark")
	o.SenderName = field.NewString(table, "sender_name")
	o.SenderMobile = field.NewString(table, "sender_mobile")
	o.SenderProvince = field.NewString(table, "sender_province")
	o.SenderCity = field.NewString(table, "sender_city")
	o.SenderCounty = field.NewString(table, "sender_county")
	o.SenderAddress = field.NewString(table, "sender_address")
	o.ReceiveName = field.NewString(table, "receive_name")
	o.ReceiveMobile = field.NewString(table, "receive_mobile")
	o.ReceiveProvince = field.NewString(table, "receive_province")
	o.ReceiveCity = field.NewString(table, "receive_city")
	o.ReceiveCounty = field.NewString(table, "receive_county")
	o.ReceiveAddress = field.NewString(table, "receive_address")
	o.IsPacking = field.NewInt64(table, "is_packing")
	o.PackFee = field.NewFloat64(table, "pack_fee")
	o.OutTotalPrice = field.NewFloat64(table, "out_total_price")
	o.SendDeliveryID = field.NewString(table, "send_delivery_id")
	o.ReceiveDeliveryID = field.NewString(table, "receive_delivery_id")
	o.RefundDeliveryID = field.NewString(table, "refund_delivery_id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.CityName = field.NewString(table, "city_name")

	o.fillFieldMap()

	return o
}

func (o *orderDetail) WithContext(ctx context.Context) IOrderDetailDo {
	return o.orderDetailDo.WithContext(ctx)
}

func (o orderDetail) TableName() string { return o.orderDetailDo.TableName() }

func (o orderDetail) Alias() string { return o.orderDetailDo.Alias() }

func (o *orderDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 28)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["appointment_start_time"] = o.AppointmentStartTime
	o.fieldMap["appointment_end_time"] = o.AppointmentEndTime
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["express_remark"] = o.ExpressRemark
	o.fieldMap["sender_name"] = o.SenderName
	o.fieldMap["sender_mobile"] = o.SenderMobile
	o.fieldMap["sender_province"] = o.SenderProvince
	o.fieldMap["sender_city"] = o.SenderCity
	o.fieldMap["sender_county"] = o.SenderCounty
	o.fieldMap["sender_address"] = o.SenderAddress
	o.fieldMap["receive_name"] = o.ReceiveName
	o.fieldMap["receive_mobile"] = o.ReceiveMobile
	o.fieldMap["receive_province"] = o.ReceiveProvince
	o.fieldMap["receive_city"] = o.ReceiveCity
	o.fieldMap["receive_county"] = o.ReceiveCounty
	o.fieldMap["receive_address"] = o.ReceiveAddress
	o.fieldMap["is_packing"] = o.IsPacking
	o.fieldMap["pack_fee"] = o.PackFee
	o.fieldMap["out_total_price"] = o.OutTotalPrice
	o.fieldMap["send_delivery_id"] = o.SendDeliveryID
	o.fieldMap["receive_delivery_id"] = o.ReceiveDeliveryID
	o.fieldMap["refund_delivery_id"] = o.RefundDeliveryID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["city_name"] = o.CityName
}

func (o orderDetail) clone(db *gorm.DB) orderDetail {
	o.orderDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderDetail) replaceDB(db *gorm.DB) orderDetail {
	o.orderDetailDo.ReplaceDB(db)
	return o
}

type orderDetailDo struct{ gen.DO }

type IOrderDetailDo interface {
	gen.SubQuery
	Debug() IOrderDetailDo
	WithContext(ctx context.Context) IOrderDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderDetailDo
	WriteDB() IOrderDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderDetailDo
	Not(conds ...gen.Condition) IOrderDetailDo
	Or(conds ...gen.Condition) IOrderDetailDo
	Select(conds ...field.Expr) IOrderDetailDo
	Where(conds ...gen.Condition) IOrderDetailDo
	Order(conds ...field.Expr) IOrderDetailDo
	Distinct(cols ...field.Expr) IOrderDetailDo
	Omit(cols ...field.Expr) IOrderDetailDo
	Join(table schema.Tabler, on ...field.Expr) IOrderDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderDetailDo
	Group(cols ...field.Expr) IOrderDetailDo
	Having(conds ...gen.Condition) IOrderDetailDo
	Limit(limit int) IOrderDetailDo
	Offset(offset int) IOrderDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDetailDo
	Unscoped() IOrderDetailDo
	Create(values ...*model.OrderDetail) error
	CreateInBatches(values []*model.OrderDetail, batchSize int) error
	Save(values ...*model.OrderDetail) error
	First() (*model.OrderDetail, error)
	Take() (*model.OrderDetail, error)
	Last() (*model.OrderDetail, error)
	Find() ([]*model.OrderDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderDetail, err error)
	FindInBatches(result *[]*model.OrderDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderDetailDo
	Assign(attrs ...field.AssignExpr) IOrderDetailDo
	Joins(fields ...field.RelationField) IOrderDetailDo
	Preload(fields ...field.RelationField) IOrderDetailDo
	FirstOrInit() (*model.OrderDetail, error)
	FirstOrCreate() (*model.OrderDetail, error)
	FindByPage(offset int, limit int) (result []*model.OrderDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderDetailDo) Debug() IOrderDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o orderDetailDo) WithContext(ctx context.Context) IOrderDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderDetailDo) ReadDB() IOrderDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderDetailDo) WriteDB() IOrderDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderDetailDo) Session(config *gorm.Session) IOrderDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderDetailDo) Clauses(conds ...clause.Expression) IOrderDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderDetailDo) Returning(value interface{}, columns ...string) IOrderDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderDetailDo) Not(conds ...gen.Condition) IOrderDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderDetailDo) Or(conds ...gen.Condition) IOrderDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderDetailDo) Select(conds ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderDetailDo) Where(conds ...gen.Condition) IOrderDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderDetailDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderDetailDo) Order(conds ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderDetailDo) Distinct(cols ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderDetailDo) Omit(cols ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderDetailDo) Join(table schema.Tabler, on ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderDetailDo) Group(cols ...field.Expr) IOrderDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderDetailDo) Having(conds ...gen.Condition) IOrderDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderDetailDo) Limit(limit int) IOrderDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderDetailDo) Offset(offset int) IOrderDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderDetailDo) Unscoped() IOrderDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderDetailDo) Create(values ...*model.OrderDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderDetailDo) CreateInBatches(values []*model.OrderDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderDetailDo) Save(values ...*model.OrderDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderDetailDo) First() (*model.OrderDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Take() (*model.OrderDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Last() (*model.OrderDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) Find() ([]*model.OrderDetail, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderDetail), err
}

func (o orderDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderDetail, err error) {
	buf := make([]*model.OrderDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderDetailDo) FindInBatches(result *[]*model.OrderDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderDetailDo) Attrs(attrs ...field.AssignExpr) IOrderDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderDetailDo) Assign(attrs ...field.AssignExpr) IOrderDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderDetailDo) Joins(fields ...field.RelationField) IOrderDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderDetailDo) Preload(fields ...field.RelationField) IOrderDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderDetailDo) FirstOrInit() (*model.OrderDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) FirstOrCreate() (*model.OrderDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderDetail), nil
	}
}

func (o orderDetailDo) FindByPage(offset int, limit int) (result []*model.OrderDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderDetailDo) Delete(models ...*model.OrderDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderDetailDo) withDO(do gen.Dao) *orderDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
